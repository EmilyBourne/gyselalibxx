#!/bin/bash
# SPDX-License-Identifier: MIT

set -e -o errexit -o noclobber -o nounset -o pipefail
set -x

cd "$(dirname "$0")"
cd ..
SRC_DIR="$PWD"

cd "$(mktemp --tmpdir -d)"
SSH_DIR="$PWD"
cp "${GITHUB_MIRROR_PRIVKEY}" "${SSH_DIR}/id_rsa"
chmod -R go-rwx "${SSH_DIR}"

git config --global --add safe.directory "${SRC_DIR}"
git config --global --add safe.directory "${SRC_DIR}/.git"

cd "$(mktemp --tmpdir -d)"
WK_DIR="$PWD"

git config --global advice.detachedHead false
git clone "$SRC_DIR" clone
cd clone
NEWSRC_DIR="$PWD"

git remote set-url origin "https://root:${SELF_COMMIT_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"

current_SHA=$(git log -1 --pretty=%H)

git fetch -p origin public
git switch -c public origin/public
git merge origin/public
last_message_public=$(git log -1 --pretty=%s%n%n%b)

# Assemble grep options to find relevant commit
git_log_options="git log --all-match -F --pretty=%H"
while IFS= read -r line
do
    while [ -n "$line" ]
    do
      # Truncate at first ` as git grep does not handle this well
      searchstring='`'
      truncated_line=${line%%$searchstring*}
      # Truncate after 140 chars as git grep does not handle more than this
      truncated_line=${truncated_line:0:140}
      quoted_line=${truncated_line//"'"/"'\"'\"'"}
      git_log_options="${git_log_options} --grep='${quoted_line}'"
      line=${truncated_line:140}
    done
done <<< ${last_message_public}
git checkout ${current_SHA}

last_match=$(eval "${git_log_options}")
echo ${last_match}

commits_to_choose=$(git rev-list ${last_match}..HEAD --reverse)

git switch public

for commit_to_copy in ${commits_to_choose}
do
    cd ${SRC_DIR}
    git checkout ${commit_to_copy} -f
    git config -f .gitmodules --get-regexp '^submodule\..*\.path$' | while read path_key path_val
    do
        git config --global --add safe.directory "${SRC_DIR}/${path_val}"
    done
    git submodule update --init -f
    git clean -fd
    deleted_submodules=$(git ls-files --others --exclude-standard)
    if [ -n "${deleted_submodules}" ]
    then
     rm -r ${deleted_submodules}
    fi
    COMMIT_MESSAGE=$(git log -1 --pretty=%s%n%n%b)

    user_name=$(git log -1 --pretty=%an)
    user_email=$(git log -1 --pretty=%ae)
    date=$(git log -1 --pretty=%ad)


    cd ${NEWSRC_DIR}
    git config user.email "${user_email}"
    git config user.name "${user_name}"

    git submodule deinit --all -f
    git rm -rf .
    find "$SRC_DIR" -maxdepth 1 -mindepth 1 '!' -name .git -exec cp -a -t "$NEWSRC_DIR" '{}' '+'
    find . -name .private -print0 | xargs -r0 dirname -z | xargs -r0 rm -rf
    git config -f .gitmodules --get-regexp '^submodule\..*\.path$' | while read path_key path_val
    do
        url_key="$(echo $path_key | sed 's/\.path/.url/')"
        url="$(git config -f .gitmodules --get "$url_key")"
        git config --global --add safe.directory "${SRC_DIR}/${path_val}"
        commit_sha1="$(git -C "${SRC_DIR}" submodule status -- "${path_val}" | awk '{print $1}' | sed 's/^-//g')"
        rm -r "$path_val"
        git submodule add --force "$url" "$path_val"
        git submodule init -- "${path_val}"
        git -C "${path_val}" checkout "${commit_sha1}" --recurse-submodules
        git submodule update --init --recursive -- "${path_val}"
        git submodule sync --recursive -- "${path_val}"
        git add -A "${path_val}"
    done
    git add -A .
    GIT_COMMITTER_DATE="${date}" git commit -m "${COMMIT_MESSAGE}" --date="${date}" || true

done

git fetch -p origin public
git merge origin/public
git push origin "HEAD:public"

export GIT_SSH_COMMAND="ssh -i ${SSH_DIR}/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=accept-new"
git push -f git@github.com:gyselax/gyselalibxx.git "HEAD:main"
